---
title: "week3lecture22ndecture"
format: html
editor: visual
---

## Dates and years 

### simple until: 

-   formats

```{=html}
<!-- -->
```
-   resolutions

-   leap years

-   time zones

-   time of day

-   day of week

## ISO 8601

-   international standard for storing date time that's not ambiguous, only means one thing, international organization for standardization to avoid misinterpretation of numeric representations of dates and times when data is transferred between countries with different conventions

-   4 digit year- 2 digit month - 2 digit day

-   keep leading zeros!

### If I don't have all of these like year or just year and month

-   full date +hours, minutes and second TZD how far or ahead a time zone is from UTC universal trans

-   date part, 2 digit hour, 2 digit minute, 2 digit, time zone designator

-   TZD: Z or +hh:mm or -hh:mm, where +/\_ indicate how far ahead/ behind a time zone is from the UTC time zone like -7:00

-   2016-06-08T09:07 + 8:00, 9:07am on june 8th, 2016 in perth, australia (UTC +8), 8 hours above UTC

### NEED MILITARY TIME

YYYY-MM-DDThh:mm:ssTZD

-7: jsut stands for 7 hour difference not mathematical

Santa Barbara is 7 hours behind UTC

-   what is the ISO 8601 format fo Feb, 18th, 1996 at 8:34 pm PST in SB

    -   1196-02-18T20:34-07:00

-   what is ISO 8601 format for 12/5/2002 at 2:41am in SB

    -   2002-12-05T02:41-07.00

-   LUBRIDATE HELPS WITH ALL OF THIS

    -   parsing date-time data quickly and mostly painlessly

    -   how to convert these easily into ISO 86-1 format without tons of tidying work

-   Classes of date time data

    **date:** calender dates, outcomes of using it ymd/dmy/mdy functions with only date component

-   PSOIXct: date-time that also includes time zone ifnormation and default is UTC outcome of using lubridate functions also includes hours/miin/sec ymd_hms, portable operating system interface- continous ti e

**Wrangling strings:** while avoiding regular expression

**strings:** ordered sequence of characters ex: the 6 cats ate

**regular expressions:** patterns used to match character combinations in strings

**{stringr}** **packages:** provides cohesive set of functions designed to make working with strings as easy as possible

including easier ways to do things like:

-   detecting string patterns

-   replacing string patters

-   counting, collapsing, returning info about strings and more

-   str_detect() : is the patterndeteced? (TRUE/FALSE)

-   str_replace(): replace a string pattern with something else

```{r}


```
